<?php

namespace OfferBundle\Repository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
    public function deleteArticle($id){
        $query = $this
            ->createQueryBuilder('a')
            ->delete('OfferBundle:Article', 'a')
            ->where('a.id = :id')
            ->setParameter('id', $id)
            ->getQuery();
        return $query->execute();
    }

    public function paginationArticles($offset, $limit, $category, $shipping, $new, $image, $order, $type, $city){
        $query = $this
            ->createQueryBuilder('a')
            ->select('a, c')
            ->join('a.category', 'c')
            ->join('a.city', 'cs')
            ->where('cs.name = :city')
            ->andWhere('c.name = :category')
            ->andWhere('a.freeShipping = 1 or a.freeShipping = :shipping')
            ->andWhere('a.isNew = 1 or a.isNew = :new')
            ->andWhere('a.featuredImage IS NOT NULL or a.featuredImage IS '.$image)
            ->orderBy('a.'.$order, $type)
            ->setParameter('city', $city)
            ->setParameter('category', $category)
            ->setParameter('shipping', $shipping)
            ->setParameter('new', $new)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getQuery();
        return $query->execute();
    }

    public function paginationAllArticles($offset, $limit, $category, $shipping, $new, $image, $order, $type){
        $query = $this
            ->createQueryBuilder('a')
            ->select('a, c')
            ->join('a.category', 'c')
            ->where('c.name = :category')
            ->andWhere('a.freeShipping = 1 or a.freeShipping = :shipping')
            ->andWhere('a.isNew = 1 or a.isNew = :new')
            ->andWhere('a.featuredImage IS NOT NULL or a.featuredImage IS '.$image)
            ->orderBy('a.'.$order, $type)
            ->setParameter('category', $category)
            ->setParameter('shipping', $shipping)
            ->setParameter('new', $new)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getQuery();
        return $query->execute();
    }

    public function featuredArticles($limit){
        $query = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->orderBy('a.views', 'DESC')
            ->setMaxResults($limit)
            ->getQuery();
        return $query->execute();
    }

    public function newArticles($limit){
        $query = $this
            ->createQueryBuilder('a')
            ->select('a')
            ->orderBy('a.dateAdded', 'DESC')
            ->setMaxResults($limit)
            ->getQuery();
        return $query->execute();
    }

    public function searchArticles($offset, $limit, $shipping, $new, $image, $order, $type, $key){
        $query = $this
            ->createQueryBuilder('a');
        return $query->select('a')->
        where($query->expr()->like('a.title',  $query->expr()->literal('%' . $key . '%')))
            ->andWhere('a.freeShipping = 1 or a.freeShipping = :shipping')
            ->andWhere('a.isNew = 1 or a.isNew = :new')
            ->andWhere('a.featuredImage IS NOT NULL or a.featuredImage IS '.$image)
            ->orderBy('a.'.$order, $type)
            ->setParameter('shipping', $shipping)
            ->setParameter('new', $new)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getQuery()->getResult();


    }

}
